/* Generated by Opal 0.6.0 */
(function($opal) {
  var self = $opal.top, $scope = $opal, nil = $opal.nil, $breaker = $opal.breaker, $slice = $opal.slice, $module = $opal.module;

  $opal.add_stubs([]);
  return (function($base) {
    var self = $module($base, 'Yeah');

    var def = self._proto, $scope = self._scope;

    $opal.cdecl($scope, 'VERSION', "0.2.2")
    
  })(self)
})(Opal);

//# sourceMappingURL=/__opal_source_maps__/yeah/version.js.map
;
/* Generated by Opal 0.6.0 */
(function($opal) {
  var self = $opal.top, $scope = $opal, nil = $opal.nil, $breaker = $opal.breaker, $slice = $opal.slice, $module = $opal.module, $klass = $opal.klass;

  $opal.add_stubs(['$alias_method', '$components=', '$name', '$class', '$components', '$attr_reader', '$respond_to?', '$flatten', '$==', '$size', '$first', '$to_a', '$>', '$raise', '$+', '$*', '$-', '$[]', '$[]=', '$operate', '$private', '$new', '$map', '$reduce', '$zip']);
  return (function($base) {
    var self = $module($base, 'Yeah');

    var def = self._proto, $scope = self._scope;

    (function($base, $super) {
      function $Vector(){};
      var self = $Vector = $klass($base, $super, 'Vector', $Vector);

      var def = self._proto, $scope = self._scope;

      (function(self) {
        var $scope = self._scope, def = self._proto;

        return self.$alias_method("[]", "new")
      })(self.$singleton_class());

      def.$initialize = function(comps) {
        var self = this;

        comps = $slice.call(arguments, 0);
        return self['$components='](comps);
      };

      def.$to_s = function() {
        var self = this;

        return "" + (self.$class().$name()) + (self.$components());
      };

      def.$to_a = function() {
        var self = this;

        return self.$components();
      };

      self.$attr_reader("components");

      def['$components='] = function(value) {
        var $a, $b, self = this, error_message = nil;

        if ((($a = value['$respond_to?']("flatten")) !== nil && (!$a._isBoolean || $a == true))) {
          value = value.$flatten()};
        if ((($a = ($b = value['$respond_to?']("size"), $b !== false && $b !== nil ?value.$size()['$=='](1) : $b)) !== nil && (!$a._isBoolean || $a == true))) {
          value = value.$first()};
        if ((($a = value['$respond_to?']("to_a")) !== nil && (!$a._isBoolean || $a == true))) {
          value = value.$to_a()};
        value = [value].$flatten();
        if (value.$size()['$>'](3)) {
          error_message = "too many elements (" + (value.$size()) + " for up to 3)";
          self.$raise((($a = $scope.ArgumentError) == null ? $opal.cm('ArgumentError') : $a), error_message);};
        return self.components = value['$+']([0]['$*'](((3)['$-'](value.$size()))));
      };

      def.$x = function() {
        var self = this;

        return self.$components()['$[]'](0);
      };

      def['$x='] = function(v) {
        var self = this;

        return self.$components()['$[]='](0, v);
      };

      def.$y = function() {
        var self = this;

        return self.$components()['$[]'](1);
      };

      def['$y='] = function(v) {
        var self = this;

        return self.$components()['$[]='](1, v);
      };

      def.$z = function() {
        var self = this;

        return self.$components()['$[]'](2);
      };

      def['$z='] = function(v) {
        var self = this;

        return self.$components()['$[]='](2, v);
      };

      def['$=='] = function(other) {
        var $a, self = this;

        return ($a = other['$respond_to?']("components"), $a !== false && $a !== nil ?self.$components()['$=='](other.$components()) : $a);
      };

      def['$+'] = function(v) {
        var self = this;

        return self.$operate("+", v);
      };

      def['$-'] = function(v) {
        var self = this;

        return self.$operate("-", v);
      };

      def['$*'] = function(v) {
        var self = this;

        return self.$operate("*", v);
      };

      def['$/'] = function(v) {
        var self = this;

        return self.$operate("/", v);
      };

      def['$[]'] = function(index) {
        var self = this;

        return self.$components()['$[]'](index);
      };

      def['$[]='] = function(index, value) {
        var self = this;

        return self.$components()['$[]='](index, value);
      };

      self.$private();

      return (def.$operate = function(operator, operand) {
        var $a, $b, TMP_1, self = this, comps = nil;

        if ((($a = operand['$respond_to?']("to_a")) !== nil && (!$a._isBoolean || $a == true))) {
          operand = operand.$to_a()
          } else {
          operand = (($a = $scope.Array) == null ? $opal.cm('Array') : $a).$new(3, operand)
        };
        comps = ($a = ($b = self.$components().$zip(operand)).$map, $a._p = (TMP_1 = function(cs){var self = TMP_1._s || this;
if (cs == null) cs = nil;
        return cs.$reduce(operator)}, TMP_1._s = self, TMP_1), $a).call($b);
        return self.$class().$new(comps);
      }, nil) && 'operate';
    })(self, null)
    
  })(self)
})(Opal);

//# sourceMappingURL=/__opal_source_maps__/yeah/vector.js.map
;
/* Generated by Opal 0.6.0 */
(function($opal) {
  var self = $opal.top, $scope = $opal, nil = $opal.nil, $breaker = $opal.breaker, $slice = $opal.slice, $module = $opal.module;

  $opal.add_stubs([]);
  return (function($base) {
    var self = $module($base, 'Yeah');

    var def = self._proto, $scope = self._scope, $a;

    $opal.cdecl($scope, 'V', (($a = $scope.Vector) == null ? $opal.cm('Vector') : $a))
    
  })(self)
})(Opal);

//# sourceMappingURL=/__opal_source_maps__/yeah/v.js.map
;
/* Generated by Opal 0.6.0 */
(function($opal) {
  var self = $opal.top, $scope = $opal, nil = $opal.nil, $breaker = $opal.breaker, $slice = $opal.slice, $module = $opal.module, $klass = $opal.klass;

  $opal.add_stubs(['$alias_method', '$respond_to?', '$first', '$rgb', '$flatten!', '$rgb=', '$name', '$class', '$to_s', '$attr_writer', '$red', '$green', '$blue', '$red=', '$green=', '$blue=', '$==', '$to_a']);
  return (function($base) {
    var self = $module($base, 'Yeah');

    var def = self._proto, $scope = self._scope;

    (function($base, $super) {
      function $Color(){};
      var self = $Color = $klass($base, $super, 'Color', $Color);

      var def = self._proto, $scope = self._scope;

      def.red = def.blue = def.green = nil;
      (function(self) {
        var $scope = self._scope, def = self._proto;

        return self.$alias_method("[]", "new")
      })(self.$singleton_class());

      def.$initialize = function(args) {
        var $a, self = this;

        args = $slice.call(arguments, 0);
        if ((($a = args.$first()['$respond_to?']("rgb")) !== nil && (!$a._isBoolean || $a == true))) {
          args = args.$first().$rgb()};
        args['$flatten!']();
        return self['$rgb='](args);
      };

      def.$to_s = function() {
        var self = this;

        return "" + (self.$class().$name()) + (self.$rgb().$to_s());
      };

      def.$red = function() {
        var $a, self = this;

        return ((($a = self.red) !== false && $a !== nil) ? $a : self.red = 0);
      };

      self.$attr_writer("red");

      def.$blue = function() {
        var $a, self = this;

        return ((($a = self.blue) !== false && $a !== nil) ? $a : self.blue = 0);
      };

      self.$attr_writer("blue");

      def.$green = function() {
        var $a, self = this;

        return ((($a = self.green) !== false && $a !== nil) ? $a : self.green = 0);
      };

      self.$attr_writer("green");

      def.$rgb = function() {
        var self = this;

        return [self.$red(), self.$green(), self.$blue()];
      };

      def['$rgb='] = function(value) {
        var $a, self = this;

        return $a = $opal.to_ary(value), self['$red='](($a[0] == null ? nil : $a[0])), self['$green='](($a[1] == null ? nil : $a[1])), self['$blue='](($a[2] == null ? nil : $a[2]));
      };

      self.$alias_method("to_a", "rgb");

      return (def['$=='] = function(other) {
        var $a, self = this;

        if ((($a = other['$respond_to?']("rgb")) !== nil && (!$a._isBoolean || $a == true))) {
          return self.$rgb()['$=='](other.$rgb())};
        if ((($a = other['$respond_to?']("to_a")) !== nil && (!$a._isBoolean || $a == true))) {
          return self.$to_a()['$=='](other.$to_a())};
        return false;
      }, nil) && '==';
    })(self, null)
    
  })(self)
})(Opal);

//# sourceMappingURL=/__opal_source_maps__/yeah/color.js.map
;
/* Generated by Opal 0.6.0 */
(function($opal) {
  var self = $opal.top, $scope = $opal, nil = $opal.nil, $breaker = $opal.breaker, $slice = $opal.slice, $module = $opal.module, $klass = $opal.klass;

  $opal.add_stubs(['$size', '$class', '$[]', '$attr_writer', '$new', '$==', '$visual', '$visual=', '$private', '$screen', '$context', '$game', '$thing']);
  return (function($base) {
    var self = $module($base, 'Yeah');

    var def = self._proto, $scope = self._scope;

    (function($base, $super) {
      function $Visual(){};
      var self = $Visual = $klass($base, $super, 'Visual', $Visual);

      var def = self._proto, $scope = self._scope;

      def.size = def.thing = nil;
      $opal.defs(self, '$size', function() {
        var self = this;
        if (self.size == null) self.size = nil;

        return self.size;
      });

      $opal.defs(self, '$size=', function(value) {
        var self = this;

        return self.size = value;
      });

      def.$size = function() {
        var $a, $b, $c, self = this;

        return ((($a = self.size) !== false && $a !== nil) ? $a : self.size = ((($b = self.$class().$size()) !== false && $b !== nil) ? $b : (($c = $scope.V) == null ? $opal.cm('V') : $c)['$[]']()));
      };

      self.$attr_writer("size");

      def.$thing = function() {
        var $a, $b, self = this;

        return ((($a = self.thing) !== false && $a !== nil) ? $a : self.thing = (($b = $scope.Thing) == null ? $opal.cm('Thing') : $b).$new());
      };

      def['$thing='] = function(val) {
        var self = this;

        self.thing = val;
        if (self.thing.$visual()['$=='](self)) {
          return nil
          } else {
          return self.thing['$visual='](self)
        };
      };

      def.$render = function() {
        var self = this;

        return nil;
      };

      self.$private();

      return (def.$screen = function() {
        var self = this;

        return self.$thing().$game().$context().$screen();
      }, nil) && 'screen';
    })(self, null)
    
  })(self)
})(Opal);

//# sourceMappingURL=/__opal_source_maps__/yeah/visuals/visual.js.map
;
/* Generated by Opal 0.6.0 */
(function($opal) {
  var self = $opal.top, $scope = $opal, nil = $opal.nil, $breaker = $opal.breaker, $slice = $opal.slice, $module = $opal.module, $klass = $opal.klass;

  $opal.add_stubs(['$size=', '$color=', '$color', '$class', '$[]', '$attr_accessor', '$screen', '$rectangle', '$position', '$thing', '$size']);
  return (function($base) {
    var self = $module($base, 'Yeah');

    var def = self._proto, $scope = self._scope, $a;

    (function($base, $super) {
      function $Box(){};
      var self = $Box = $klass($base, $super, 'Box', $Box);

      var def = self._proto, $scope = self._scope;

      $opal.defs(self, '$color', function() {
        var self = this;
        if (self.color == null) self.color = nil;

        return self.color;
      });

      $opal.defs(self, '$color=', function(value) {
        var self = this;

        return self.color = value;
      });

      def.$initialize = function(size, color) {
        var $a, self = this;

        if (size == null) {
          size = nil
        }
        if (color == null) {
          color = (($a = $scope.Color) == null ? $opal.cm('Color') : $a)['$[]'](0, 0, 0)
        }
        if (size !== false && size !== nil) {
          self['$size='](size)};
        return self['$color='](((($a = self.$class().$color()) !== false && $a !== nil) ? $a : color));
      };

      self.$attr_accessor("color");

      return (def.$render = function() {
        var self = this;

        self.$screen().$color(self.$color());
        return self.$screen().$rectangle(self.$thing().$position(), self.$thing().$size());
      }, nil) && 'render';
    })(self, (($a = $scope.Visual) == null ? $opal.cm('Visual') : $a))
    
  })(self)
})(Opal);

//# sourceMappingURL=/__opal_source_maps__/yeah/visuals/box.js.map
;
/* Generated by Opal 0.6.0 */
(function($opal) {
  var self = $opal.top, $scope = $opal, nil = $opal.nil, $breaker = $opal.breaker, $slice = $opal.slice, $module = $opal.module, $klass = $opal.klass, $hash2 = $opal.hash2;

  $opal.add_stubs(['$respond_to?', '$to_h', '$each', '$send', '$setup', '$[]', '$new', '$include?', '$things', '$<<', '$game', '$space', '$position', '$[]=', '$size', '$visual', '$visual=', '$project_visual_instance', '$==', '$thing', '$thing=', '$+', '$x', '$*', '$width', '$-', '$anchor', '$y', '$height', '$z', '$depth', '$is_a?', '$any?', '$colliding?', '$select', '$>', '$left', '$right', '$<', '$bottom', '$top', '$back', '$front', '$!', '$protected', '$pressing?', '$private', '$mouse', '$context', '$name', '$class', '$last', '$split', '$const_defined?', '$const_get', '$project_visual']);
  return (function($base) {
    var self = $module($base, 'Yeah');

    var def = self._proto, $scope = self._scope;

    (function($base, $super) {
      function $Thing(){};
      var self = $Thing = $klass($base, $super, 'Thing', $Thing);

      var def = self._proto, $scope = self._scope;

      def.space = def.position = def.size = def.visual = def.anchor = def.project_visual_instance = nil;
      def.$initialize = function(properties) {
        var $a, $b, TMP_1, self = this;

        if (properties == null) {
          properties = (($a = $scope.V) == null ? $opal.cm('V') : $a)['$[]']()
        }
        if ((($a = properties['$respond_to?']("to_h")) !== nil && (!$a._isBoolean || $a == true))) {
          } else {
          properties = $hash2(["position"], {"position": properties})
        };
        properties = properties.$to_h();
        ($a = ($b = properties).$each, $a._p = (TMP_1 = function(key, val){var self = TMP_1._s || this, writer = nil;
if (key == null) key = nil;if (val == null) val = nil;
        writer = "" + (key) + "=";
          return self.$send(writer, val);}, TMP_1._s = self, TMP_1), $a).call($b);
        return self.$setup();
      };

      def.$space = function() {
        var $a, $b, self = this;

        return ((($a = self.space) !== false && $a !== nil) ? $a : self.space = (($b = $scope.Space) == null ? $opal.cm('Space') : $b).$new());
      };

      def['$space='] = function(value) {
        var $a, self = this;

        self.space = value;
        if ((($a = self.space.$things()['$include?'](self)) !== nil && (!$a._isBoolean || $a == true))) {
          return nil
          } else {
          return self.space.$things()['$<<'](self)
        };
      };

      def.$game = function() {
        var self = this;

        return self.$space().$game();
      };

      def.$position = function() {
        var $a, $b, self = this;

        return ((($a = self.position) !== false && $a !== nil) ? $a : self.position = (($b = $scope.V) == null ? $opal.cm('V') : $b)['$[]']());
      };

      def['$position='] = function(value) {
        var $a, self = this;

        return self.position = (($a = $scope.V) == null ? $opal.cm('V') : $a)['$[]'](value);
      };

      def.$x = function() {
        var self = this;

        return self.$position()['$[]'](0);
      };

      def['$x='] = function(v) {
        var self = this;

        return self.$position()['$[]='](0, v);
      };

      def.$y = function() {
        var self = this;

        return self.$position()['$[]'](1);
      };

      def['$y='] = function(v) {
        var self = this;

        return self.$position()['$[]='](1, v);
      };

      def.$z = function() {
        var self = this;

        return self.$position()['$[]'](2);
      };

      def['$z='] = function(v) {
        var self = this;

        return self.$position()['$[]='](2, v);
      };

      def.$size = function() {
        var $a, self = this;

        return ((($a = self.size) !== false && $a !== nil) ? $a : self.size = self.$visual().$size());
      };

      def['$size='] = function(value) {
        var $a, self = this;

        return self.size = (($a = $scope.V) == null ? $opal.cm('V') : $a)['$[]'](value);
      };

      def.$width = function() {
        var self = this;

        return self.$size()['$[]'](0);
      };

      def['$width='] = function(v) {
        var self = this;

        return self.$size()['$[]='](0, v);
      };

      def.$height = function() {
        var self = this;

        return self.$size()['$[]'](1);
      };

      def['$height='] = function(v) {
        var self = this;

        return self.$size()['$[]='](1, v);
      };

      def.$depth = function() {
        var self = this;

        return self.$size()['$[]'](2);
      };

      def['$depth='] = function(v) {
        var self = this;

        return self.$size()['$[]='](2, v);
      };

      def.$visual = function() {
        var $a, $b, self = this;

        if ((($a = self.visual) !== nil && (!$a._isBoolean || $a == true))) {
          return self.visual};
        self['$visual='](((($a = self.$project_visual_instance()) !== false && $a !== nil) ? $a : (($b = $scope.Visual) == null ? $opal.cm('Visual') : $b).$new()));
        return self.visual;
      };

      def['$visual='] = function(val) {
        var self = this;

        self.visual = val;
        if (self.visual.$thing()['$=='](self)) {
          return nil
          } else {
          return self.visual['$thing='](self)
        };
      };

      def.$anchor = function() {
        var $a, $b, self = this;

        return ((($a = self.anchor) !== false && $a !== nil) ? $a : self.anchor = (($b = $scope.V) == null ? $opal.cm('V') : $b)['$[]']());
      };

      def['$anchor='] = function(value) {
        var $a, self = this;

        return self.anchor = (($a = $scope.V) == null ? $opal.cm('V') : $a)['$[]'](value);
      };

      def.$right = function() {
        var self = this;

        return self.$x()['$+'](self.$width()['$*'](((1)['$-'](self.$anchor()['$[]'](0)))));
      };

      def.$left = function() {
        var self = this;

        return self.$x()['$+'](self.$width()['$*'](self.$anchor()['$[]'](0)));
      };

      def.$top = function() {
        var self = this;

        return self.$y()['$+'](self.$height()['$*'](((1)['$-'](self.$anchor()['$[]'](1)))));
      };

      def.$bottom = function() {
        var self = this;

        return self.$y()['$+'](self.$height()['$*'](self.$anchor()['$[]'](1)));
      };

      def.$front = function() {
        var self = this;

        return self.$z()['$+'](self.$depth()['$*'](((1)['$-'](self.$anchor()['$[]'](2)))));
      };

      def.$back = function() {
        var self = this;

        return self.$z()['$+'](self.$depth()['$*'](self.$anchor()['$[]'](2)));
      };

      def.$center = function() {
        var self = this;

        return self.$position()['$+'](self.$size()['$*'](self.$anchor()));
      };

      def['$colliding?'] = function(other) {
        var $a, $b, TMP_2, $c, $d, TMP_3, $e, self = this, not_colliding_x = nil, not_colliding_y = nil, not_colliding_z = nil;

        if (other['$=='](self)) {
          return false};
        if ((($a = other['$is_a?']((($b = $scope.Class) == null ? $opal.cm('Class') : $b))) !== nil && (!$a._isBoolean || $a == true))) {
          return ($a = ($b = ($c = ($d = self.$space().$things()).$select, $c._p = (TMP_3 = function(e){var self = TMP_3._s || this;
if (e == null) e = nil;
          return e['$is_a?'](other)}, TMP_3._s = self, TMP_3), $c).call($d))['$any?'], $a._p = (TMP_2 = function(e){var self = TMP_2._s || this;
if (e == null) e = nil;
          return self['$colliding?'](e)}, TMP_2._s = self, TMP_2), $a).call($b)};
        if ((($a = ((($c = self.$size()['$==']((($e = $scope.V) == null ? $opal.cm('V') : $e)['$[]']())) !== false && $c !== nil) ? $c : other.$size()['$==']((($e = $scope.V) == null ? $opal.cm('V') : $e)['$[]']()))) !== nil && (!$a._isBoolean || $a == true))) {
          return false};
        not_colliding_x = ((($a = self.$left()['$>'](other.$right())) !== false && $a !== nil) ? $a : self.$right()['$<'](other.$left()));
        not_colliding_y = ((($a = self.$bottom()['$>'](other.$top())) !== false && $a !== nil) ? $a : self.$top()['$<'](other.$bottom()));
        not_colliding_z = ((($a = self.$back()['$>'](other.$front())) !== false && $a !== nil) ? $a : self.$front()['$<'](other.$back()));
        return (($a = (($c = not_colliding_x !== false && not_colliding_x !== nil) ? not_colliding_y : $c), $a !== false && $a !== nil ?not_colliding_z : $a))['$!']();
      };

      def.$setup = function() {
        var self = this;

        return nil;
      };

      def.$update = function() {
        var self = this;

        return nil;
      };

      self.$protected();

      def['$pressing?'] = function(pressable) {
        var self = this;

        return self.$game()['$pressing?'](pressable);
      };

      self.$private();

      def.$mouse = function() {
        var self = this;

        return self.$game().$context().$mouse();
      };

      def.$project_visual = function() {
        var $a, $b, self = this, thing_class_name = nil, class_name = nil;

        if ((($a = self.$class().$name()) !== nil && (!$a._isBoolean || $a == true))) {
          } else {
          return nil
        };
        thing_class_name = self.$class().$name().$split("::").$last();
        class_name = "" + (thing_class_name) + "Visual";
        if ((($a = (($b = $scope.Object) == null ? $opal.cm('Object') : $b)['$const_defined?'](class_name)) !== nil && (!$a._isBoolean || $a == true))) {
          return (($a = $scope.Object) == null ? $opal.cm('Object') : $a).$const_get(class_name)
          } else {
          return nil
        };
      };

      return (def.$project_visual_instance = function() {
        var $a, self = this;

        if ((($a = self.$project_visual()) !== nil && (!$a._isBoolean || $a == true))) {
          return ((($a = self.project_visual_instance) !== false && $a !== nil) ? $a : self.project_visual_instance = self.$project_visual().$new())
          } else {
          return nil
        };
      }, nil) && 'project_visual_instance';
    })(self, null)
    
  })(self)
})(Opal);

//# sourceMappingURL=/__opal_source_maps__/yeah/thing.js.map
;
/* Generated by Opal 0.6.0 */
(function($opal) {
  var self = $opal.top, $scope = $opal, nil = $opal.nil, $breaker = $opal.breaker, $slice = $opal.slice, $module = $opal.module, $klass = $opal.klass, $hash2 = $opal.hash2;

  $opal.add_stubs(['$each', '$send', '$[]', '$respond_to?', '$const_get', '$first', '$<<', '$new', '$to_h', '$space=', '$==', '$space', '$game', '$to_proc', '$things']);
  return (function($base) {
    var self = $module($base, 'Yeah');

    var def = self._proto, $scope = self._scope;

    (function($base, $super) {
      function $Space(){};
      var self = $Space = $klass($base, $super, 'Space', $Space);

      var def = self._proto, $scope = self._scope;

      def.background = def.things = def.game = nil;
      def.$initialize = function(properties) {
        var $a, $b, TMP_1, self = this;

        if (properties == null) {
          properties = $hash2([], {})
        }
        return ($a = ($b = properties).$each, $a._p = (TMP_1 = function(key, val){var self = TMP_1._s || this, writer = nil;
if (key == null) key = nil;if (val == null) val = nil;
        writer = "" + (key) + "=";
          return self.$send(writer, val);}, TMP_1._s = self, TMP_1), $a).call($b);
      };

      def.$background = function() {
        var $a, $b, self = this;

        return ((($a = self.background) !== false && $a !== nil) ? $a : self.background = (($b = $scope.Color) == null ? $opal.cm('Color') : $b)['$[]']());
      };

      def['$background='] = function(value) {
        var $a, self = this;

        return self.background = (($a = $scope.Color) == null ? $opal.cm('Color') : $a)['$[]'](value);
      };

      def.$things = function() {
        var $a, self = this;

        return ((($a = self.things) !== false && $a !== nil) ? $a : self.things = []);
      };

      def['$things='] = function(value) {
        var $a, $b, TMP_2, $c, TMP_4, self = this, new_things = nil;

        if ((($a = value['$respond_to?']("to_h")) !== nil && (!$a._isBoolean || $a == true))) {
          new_things = [];
          ($a = ($b = value.$to_h()).$each, $a._p = (TMP_2 = function(type_name, positions){var self = TMP_2._s || this, $a, $b, TMP_3, type = nil;
if (type_name == null) type_name = nil;if (positions == null) positions = nil;
          type = (($a = $scope.Kernel) == null ? $opal.cm('Kernel') : $a).$const_get(type_name);
            if ((($a = positions.$first()['$respond_to?']("to_a")) !== nil && (!$a._isBoolean || $a == true))) {
              } else {
              positions = [positions]
            };
            return ($a = ($b = positions).$each, $a._p = (TMP_3 = function(position){var self = TMP_3._s || this;
if (position == null) position = nil;
            return new_things['$<<'](type.$new(position))}, TMP_3._s = self, TMP_3), $a).call($b);}, TMP_2._s = self, TMP_2), $a).call($b);
          value = new_things;};
        self.things = value;
        return ($a = ($c = self.things).$each, $a._p = (TMP_4 = function(t){var self = TMP_4._s || this;
if (t == null) t = nil;
        return t['$space='](self)}, TMP_4._s = self, TMP_4), $a).call($c);
      };

      def.$game = function() {
        var $a, $b, self = this;

        return ((($a = self.game) !== false && $a !== nil) ? $a : self.game = (($b = $scope.Game) == null ? $opal.cm('Game') : $b).$new());
      };

      def['$game='] = function(value) {
        var self = this;

        self.game = value;
        if (self.$game().$space()['$=='](self)) {
          return nil
          } else {
          return self.game['$space='](self)
        };
      };

      return (def.$update = function() {
        var $a, $b, self = this;

        return ($a = ($b = self.$things()).$each, $a._p = "update".$to_proc(), $a).call($b);
      }, nil) && 'update';
    })(self, null)
    
  })(self)
})(Opal);

//# sourceMappingURL=/__opal_source_maps__/yeah/space.js.map
;
/* Generated by Opal 0.6.0 */
(function($opal) {
  var self = $opal.top, $scope = $opal, nil = $opal.nil, $breaker = $opal.breaker, $slice = $opal.slice, $module = $opal.module, $klass = $opal.klass, $hash2 = $opal.hash2;

  $opal.add_stubs(['$resolution=', '$resolution', '$class', '$[]', '$space', '$space=', '$new', '$attr_reader', '$screen', '$attr_accessor', '$respond_to?', '$data', '$==', '$game', '$game=', '$on_tick', '$update', '$render', '$context', '$protected']);
  return (function($base) {
    var self = $module($base, 'Yeah');

    var def = self._proto, $scope = self._scope;

    (function($base, $super) {
      function $Game(){};
      var self = $Game = $klass($base, $super, 'Game', $Game);

      var def = self._proto, $scope = self._scope;

      def.context = def.space = nil;
      $opal.defs(self, '$resolution', function() {
        var self = this;
        if (self.resolution == null) self.resolution = nil;

        return self.resolution;
      });

      $opal.defs(self, '$resolution=', function(value) {
        var self = this;

        return self.resolution = value;
      });

      $opal.defs(self, '$space', function() {
        var self = this;
        if (self.space == null) self.space = nil;

        return self.space;
      });

      $opal.defs(self, '$space=', function(value) {
        var self = this;

        return self.space = value;
      });

      def.$initialize = function(data, context) {
        var $a, $b, self = this;

        if (data == null) {
          data = $hash2([], {})
        }
        if (context == null) {
          context = (($a = ((($b = $scope.Unplatform) == null ? $opal.cm('Unplatform') : $b))._scope).Context == null ? $a.cm('Context') : $a.Context).$new()
        }
        self.data = data;
        self.context = context;
        self['$resolution='](((($a = self.$class().$resolution()) !== false && $a !== nil) ? $a : (($b = $scope.V) == null ? $opal.cm('V') : $b)['$[]'](640, 360)));
        if ((($a = self.$class().$space()) !== nil && (!$a._isBoolean || $a == true))) {
          return self['$space='](self.$class().$space())
          } else {
          return nil
        };
      };

      self.$attr_reader("context");

      def.$resolution = function() {
        var self = this;

        return self.context.$screen().$resolution();
      };

      def['$resolution='] = function(value) {
        var $a, $b, self = this;

        value = $slice.call(arguments, 0);
        return self.context.$screen()['$resolution='](($a = (($b = $scope.V) == null ? $opal.cm('V') : $b))['$[]'].apply($a, [].concat(value)));
      };

      self.$attr_accessor("data");

      def.$space = function() {
        var $a, $b, self = this;

        return ((($a = self.space) !== false && $a !== nil) ? $a : self.space = (($b = $scope.Space) == null ? $opal.cm('Space') : $b).$new());
      };

      def['$space='] = function(value) {
        var $a, self = this, space_data = nil;

        if ((($a = value['$respond_to?']("to_sym")) !== nil && (!$a._isBoolean || $a == true))) {
          space_data = self.$data()['$[]']("spaces")['$[]'](value);
          value = (($a = $scope.Space) == null ? $opal.cm('Space') : $a).$new(space_data);};
        self.space = value;
        if (self.$space().$game()['$=='](self)) {
          return nil
          } else {
          return self.space['$game='](self)
        };
      };

      def.$start = function() {
        var $a, $b, TMP_1, self = this;

        return ($a = ($b = self.$context()).$on_tick, $a._p = (TMP_1 = function(){var self = TMP_1._s || this, $a;
          if (self.stopped == null) self.stopped = nil;

        self.$update();
          self.$render();
          if ((($a = self.stopped) !== nil && (!$a._isBoolean || $a == true))) {
            return ($breaker.$v = nil, $breaker)
            } else {
            return nil
          };}, TMP_1._s = self, TMP_1), $a).call($b);
      };

      def.$stop = function() {
        var self = this;

        return self.stopped = true;
      };

      self.$protected();

      def.$update = function() {
        var self = this;

        return self.$space().$update();
      };

      return (def.$render = function() {
        var self = this;

        return self.$context().$screen().$render(self.$space());
      }, nil) && 'render';
    })(self, null)
    
  })(self)
})(Opal);

//# sourceMappingURL=/__opal_source_maps__/yeah/game.js.map
;
/* Generated by Opal 0.6.0 */
(function($opal) {
  var self = $opal.top, $scope = $opal, nil = $opal.nil, $breaker = $opal.breaker, $slice = $opal.slice, $module = $opal.module, $klass = $opal.klass;

  $opal.add_stubs([]);
  return (function($base) {
    var self = $module($base, 'Yeah');

    var def = self._proto, $scope = self._scope;

    (function($base) {
      var self = $module($base, 'Unplatform');

      var def = self._proto, $scope = self._scope;

      (function($base, $super) {
        function $Context(){};
        var self = $Context = $klass($base, $super, 'Context', $Context);

        var def = self._proto, $scope = self._scope, TMP_1;

        def.$method_missing = TMP_1 = function(args) {
          var $a, self = this, $iter = TMP_1._p, block = $iter || nil;

          args = $slice.call(arguments, 0);
          TMP_1._p = null;
          if (block !== false && block !== nil) {
            return $a = $opal.$yieldX(block, []), $a === $breaker ? $a : $a
            } else {
            return nil
          };
        };

        def.$screen = function() {
          var self = this;

          return self;
        };

        return (def.$mouse = function() {
          var self = this;

          return self;
        }, nil) && 'mouse';
      })(self, null)
      
    })(self)
    
  })(self)
})(Opal);

//# sourceMappingURL=/__opal_source_maps__/yeah/platforms/unplatform/context.js.map
;
/* Generated by Opal 0.6.0 */
(function($opal) {
  var self = $opal.top, $scope = $opal, nil = $opal.nil, $breaker = $opal.breaker, $slice = $opal.slice, $module = $opal.module;

  $opal.add_stubs([]);
  (function($base) {
    var self = $module($base, 'Yeah');

    var def = self._proto, $scope = self._scope;

    (function($base) {
      var self = $module($base, 'Unplatform');

      var def = self._proto, $scope = self._scope;

      nil
      
    })(self)
    
  })(self);
  return true;
})(Opal);

//# sourceMappingURL=/__opal_source_maps__/yeah/platforms/unplatform.js.map
;
/* Generated by Opal 0.6.0 */
(function($opal) {
  var self = $opal.top, $scope = $opal, nil = $opal.nil, $breaker = $opal.breaker, $slice = $opal.slice, $module = $opal.module;

  $opal.add_stubs([]);
  (function($base) {
    var self = $module($base, 'Yeah');

    var def = self._proto, $scope = self._scope;

    nil
    
  })(self);
  ;
  ;
  ;
  ;
  ;
  ;
  ;
  ;
  ;
  return true;
})(Opal);

//# sourceMappingURL=/__opal_source_maps__/yeah.js.map
;
