/* Generated by Opal 0.6.0 */
(function($opal) {
  var self = $opal.top, $scope = $opal, nil = $opal.nil, $breaker = $opal.breaker, $slice = $opal.slice, $klass = $opal.klass, $hash2 = $opal.hash2;

  $opal.add_stubs(['$include', '$[]', '$size=', '$charged?', '$thing', '$color=', '$position=', '$position', '$mouse', '$x=', '$-', '$x', '$/', '$size', '$left_clicking?', '$!', '$new', '$space', '$+', '$==', '$%', '$*', '$y=', '$y', '$space=']);
  self.$include($scope.Yeah);
  (function($base, $super) {
    function $FollowerVisual(){};
    var self = $FollowerVisual = $klass($base, $super, 'FollowerVisual', $FollowerVisual);

    var def = self._proto, $scope = self._scope;

    $opal.cdecl($scope, 'COLORS', $hash2(["default", "charged"], {"default": $scope.Color['$[]'](0.8, 0.5, 0.3), "charged": $scope.Color['$[]'](0.3, 0.5, 0.8)}));

    self['$size=']($scope.V['$[]'](24, 48));

    return (def.$color = function() {
      var $a, self = this;

      if ((($a = self.$thing()['$charged?']()) !== nil && (!$a._isBoolean || $a == true))) {
        return $scope.COLORS['$[]']("charged")
        } else {
        return $scope.COLORS['$[]']("default")
      };
    }, nil) && 'color';
  })(self, $scope.Box);
  (function($base, $super) {
    function $WandererVisual(){};
    var self = $WandererVisual = $klass($base, $super, 'WandererVisual', $WandererVisual);

    var def = self._proto, $scope = self._scope;

    self['$size=']($scope.V['$[]'](24, 48));

    return self['$color=']($scope.Color['$[]'](0.8, 0.8, 0.3));
  })(self, $scope.Box);
  (function($base, $super) {
    function $BlockVisual(){};
    var self = $BlockVisual = $klass($base, $super, 'BlockVisual', $BlockVisual);

    var def = self._proto, $scope = self._scope;

    self['$size=']($scope.V['$[]'](24, 24));

    return self['$color=']($scope.Color['$[]'](0.3, 0.3, 0.3));
  })(self, $scope.Box);
  (function($base, $super) {
    function $Follower(){};
    var self = $Follower = $klass($base, $super, 'Follower', $Follower);

    var def = self._proto, $scope = self._scope;

    def.clicking = nil;
    def.$update = function() {
      var $a, $b, self = this;

      self['$position='](self.$mouse().$position());
      ($a = self.$position(), $a['$x=']($a.$x()['$-'](self.$size().$x()['$/'](2))));
      if ((($a = ($b = self.$mouse()['$left_clicking?'](), $b !== false && $b !== nil ?self.clicking['$!']() : $b)) !== nil && (!$a._isBoolean || $a == true))) {
        self.clicking = true;
        $scope.Block.$new($hash2(["space", "position"], {"space": self.$space(), "position": self.$position()}));};
      if ((($a = self.$mouse()['$left_clicking?']()) !== nil && (!$a._isBoolean || $a == true))) {
        return nil
        } else {
        return self.clicking = false
      };
    };

    return (def['$charged?'] = function() {
      var self = this;

      return self.$mouse()['$left_clicking?']();
    }, nil) && 'charged?';
  })(self, $scope.Thing);
  (function($base, $super) {
    function $Block(){};
    var self = $Block = $klass($base, $super, 'Block', $Block);

    var def = self._proto, $scope = self._scope;

    return nil;
  })(self, $scope.Thing);
  (function($base, $super) {
    function $Wanderer(){};
    var self = $Wanderer = $klass($base, $super, 'Wanderer', $Wanderer);

    var def = self._proto, $scope = self._scope;

    def.updates = def.direction = nil;
    def.$setup = function() {
      var self = this;

      self.direction = $scope.V['$[]'](1, 1);
      return self.updates = 0;
    };

    return (def.$update = function() {
      var $a, self = this;

      self.updates = self.updates['$+'](1);
      if (self.updates['$%'](150)['$=='](0)) {
        ($a = self.direction, $a['$x=']($a.$x()['$*'](-1)))};
      if (self.updates['$%'](200)['$=='](0)) {
        ($a = self.direction, $a['$y=']($a.$y()['$*'](-1)))};
      return ($a = self, $a['$position=']($a.$position()['$+'](self.direction)));
    }, nil) && 'update';
  })(self, $scope.Thing);
  (function($base, $super) {
    function $TestbedGame(){};
    var self = $TestbedGame = $klass($base, $super, 'TestbedGame', $TestbedGame);

    var def = self._proto, $scope = self._scope;

    return self['$space=']("test")
  })(self, $scope.Game);
  $opal.cdecl($scope, 'YEAH_PROJECT_DATA', $hash2(["spaces"], {"spaces": $hash2(["test"], {"test": $hash2(["background", "things"], {"background": [0.3, 0.7, 0.3], "things": $hash2(["Wanderer", "Follower", "Block"], {"Wanderer": [120, 120], "Follower": [240, 240], "Block": [[0, 0], [0, 24], [0, 48], [0, 72], [24, 0], [48, 0], [72, 0], [72, 72]]})})})}));
  return $opal.cdecl($scope, 'YEAH_PROJECT_GAME', $scope.TestbedGame);
})(Opal);
